# .github/workflows/release.yml
name: Release

on:
  push:
    branches:
      - main
      - pre-release
      - preview
      - develop
      
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    environment: dynatrace
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Set branch-specific configuration
        id: config
        run: |
          case "${{ github.ref_name }}" in
            main)
              echo "app_id=my.teams.observability" >> $GITHUB_OUTPUT
              echo "app_name=Microsoft Teams Observability" >> $GITHUB_OUTPUT
              echo "app_description=Crafted by Phenisys." >> $GITHUB_OUTPUT
              echo "schema_id=ms-teams-observability" >> $GITHUB_OUTPUT
              echo "schema_display_name=MS Teams Observability" >> $GITHUB_OUTPUT
              ;;
            pre-release)
              echo "app_id=my.teams.observability.prerelease" >> $GITHUB_OUTPUT
              echo "app_name=(Pre-Release) Microsoft Teams Observability" >> $GITHUB_OUTPUT
              echo "app_description=Pre-release environment - Crafted by Phenisys." >> $GITHUB_OUTPUT
              echo "schema_id=ms-teams-observability-prerelease" >> $GITHUB_OUTPUT
              echo "schema_display_name=(Pre-Release) MS Teams Observability" >> $GITHUB_OUTPUT
              ;;
            preview)
              echo "app_id=my.teams.observability.preview" >> $GITHUB_OUTPUT
              echo "app_name=(Beta) Microsoft Teams Observability" >> $GITHUB_OUTPUT
              echo "app_description=Preview environment - Crafted by Phenisys." >> $GITHUB_OUTPUT
              echo "schema_id=ms-teams-observability-preview" >> $GITHUB_OUTPUT
              echo "schema_display_name=(Beta) MS Teams Observability" >> $GITHUB_OUTPUT
              ;;
            develop)
              echo "app_id=my.teams.observability.development" >> $GITHUB_OUTPUT
              echo "app_name=(Alpha) Microsoft Teams Observability" >> $GITHUB_OUTPUT
              echo "app_description=Development environment - Crafted by Phenisys." >> $GITHUB_OUTPUT
              echo "schema_id=ms-teams-observability-development" >> $GITHUB_OUTPUT
              echo "schema_display_name=(Alpha) MS Teams Observability" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "app_id=my.teams.observability.feature" >> $GITHUB_OUTPUT
              echo "app_name=(Feature) Microsoft Teams Observability" >> $GITHUB_OUTPUT
              echo "app_description=Feature branch - Crafted by Phenisys." >> $GITHUB_OUTPUT
              echo "schema_id=ms-teams-observability-feature" >> $GITHUB_OUTPUT
              echo "schema_display_name=(Feature) MS Teams Observability" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Install dependencies
        run: npm ci

      - name: Update app.config.json with branch config
        run: |
          jq --arg id "${{ steps.config.outputs.app_id }}" \
             --arg name "${{ steps.config.outputs.app_name }}" \
             --arg desc "${{ steps.config.outputs.app_description }}" \
             '.app.id = $id | .app.name = $name | .app.description = $desc' \
             app.config.json > tmp.json && mv tmp.json app.config.json

      - name: Update schema file with branch config
        run: |
          SCHEMA_FILE="settings/schemas/ms-teams-observability.schema.json"
          if [ -f "$SCHEMA_FILE" ]; then
            jq --arg schemaId "${{ steps.config.outputs.schema_id }}" \
               --arg displayName "${{ steps.config.outputs.schema_display_name }}" \
               '.schemaId = $schemaId | .displayName = $displayName' \
               "$SCHEMA_FILE" > tmp_schema.json && mv tmp_schema.json "$SCHEMA_FILE"
          else
            echo "Schema file not found: $SCHEMA_FILE"
          fi

      - name: Build application
        run: npm run build

      - name: Generate deployment artifact
        env:
          DT_APP_OAUTH_CLIENT_ID: ${{ secrets.DT_APP_OAUTH_CLIENT_ID }}
          DT_APP_OAUTH_CLIENT_SECRET: ${{ secrets.DT_APP_OAUTH_CLIENT_SECRET }}
        run: npx dt-app deploy --skip-build --dry-run

      - name: Verify artifact exists
        run: |
          if [ ! -f "./out/artifact.zip" ]; then
            echo "Error: artifact.zip not found in ./out/"
            exit 1
          fi
          echo "Artifact size: $(du -h ./out/artifact.zip | cut -f1)"

      - name: Detect next version
        id: version
        run: |
          # Run semantic-release in dry-run mode to determine next version
          output=$(npx semantic-release --dry-run --no-ci)
          echo "DEBUG: semantic-release output -> $output"
          # Extract everything after "is " on the matching line
          nextVersion=$(printf "%s" "$output" \
            | grep -oE 'The next release version is .*' \
            | sed -E 's/^.*is (.*)$/\1/' \
            || true)
          if [ -z "$nextVersion" ]; then
            echo "no_version=true" >> $GITHUB_OUTPUT
            echo "do_release=false" >> $GITHUB_OUTPUT
            echo "next_version=" >> $GITHUB_OUTPUT
          else
            echo "no_version=false" >> $GITHUB_OUTPUT
            echo "do_release=true" >> $GITHUB_OUTPUT
            echo "next_version=$nextVersion" >> $GITHUB_OUTPUT
          fi
          
      - name: Abort if no new version
        if: steps.version.outputs.do_release == 'false'
        run: |
          echo "No new version detected; exiting workflow."
          exit 0

      - name: Update app.config.json with version
        if: steps.version.outputs.do_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.next_version }}"
          jq --arg ver "$VERSION" \
             --arg id "${{ steps.config.outputs.app_id }}" \
             --arg name "${{ steps.config.outputs.app_name }}" \
             --arg desc "${{ steps.config.outputs.app_description }}" \
             '.app.version = $ver | .app.id = $id | .app.name = $name | .app.description = $desc' \
             app.config.json > tmp.json && mv tmp.json app.config.json
          
          # Also update schema file with branch config
          SCHEMA_FILE="settings/schemas/ms-teams-observability.schema.json"
          if [ -f "$SCHEMA_FILE" ]; then
            jq --arg schemaId "${{ steps.config.outputs.schema_id }}" \
               --arg displayName "${{ steps.config.outputs.schema_display_name }}" \
               '.schemaId = $schemaId | .displayName = $displayName' \
               "$SCHEMA_FILE" > tmp_schema.json && mv tmp_schema.json "$SCHEMA_FILE"
          fi
          
          # Check if any files changed before committing
          if git diff --quiet app.config.json "$SCHEMA_FILE" 2>/dev/null || git diff --quiet app.config.json 2>/dev/null; then
            echo "No changes in configuration files; skipping commit and push."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app.config.json
          if [ -f "$SCHEMA_FILE" ]; then
            git add "$SCHEMA_FILE"
          fi
          git commit -m "chore: bump version to $VERSION for ${{ github.ref_name }}"
          git push

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
        
      - name: Deploy on dynatrace
        if: steps.version.outputs.do_release == 'true'
        env:
          DT_APP_OAUTH_CLIENT_ID: ${{ secrets.DT_APP_OAUTH_CLIENT_ID }}
          DT_APP_OAUTH_CLIENT_SECRET: ${{ secrets.DT_APP_OAUTH_CLIENT_SECRET }}
        run: echo "Deploying to Dynatrace with version ${{ steps.version.outputs.next_version }}"
